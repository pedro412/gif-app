{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","value","setValue","onSubmit","e","preventDefault","length","categories","onChange","target","type","name","id","getGifs","category","a","url","encodeURI","fetch","resp","json","data","console","log","gifs","map","img","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","item","key","initialState","GifExpertApp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MA+BeA,EA5BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACfC,mBAAS,IADM,mBAClCC,EADkC,KAC3BC,EAD2B,KAGzC,OACE,0BACEC,SAAU,SAACC,GACTA,EAAEC,iBACEJ,EAAMK,OAAS,GACjBP,GAAc,SAACQ,GAAD,OAAiBN,GAAjB,mBAA2BM,OAE3CL,EAAS,MAGX,2BACED,MAAOA,EACPO,SAAU,SAACJ,GAAD,OAAOF,EAASE,EAAEK,OAAOR,QACnCS,KAAK,OACLC,KAAK,QACLC,GAAG,Y,uBCnBEC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,uDAFP,mCAEO,cACoDC,UACvEH,GAFmB,sBAKFI,MAAMF,GALJ,cAKfG,EALe,gBAMEA,EAAKC,OANP,uBAMbC,EANa,EAMbA,KAERC,QAAQC,IAAIF,GAENG,EAAOH,EAAKI,KAAI,SAACC,GAAD,YAAU,CAC9Bd,GAAIc,EAAId,GACRe,MAAOD,EAAIC,MACXX,IAAG,UAAEU,EAAIE,cAAN,aAAE,EAAYC,iBAAiBb,QAbf,kBAgBdQ,GAhBc,4CAAH,sDCSLM,EATK,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOX,EAAU,EAAVA,IAC5B,OACE,yBAAKe,UAAU,aACb,yBAAKC,IAAKhB,EAAKiB,IAAKN,IACpB,2BAAIA,KCcKO,EAhBC,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECDN,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,SAAe,EAClBd,mBAAS,CACjCqB,KAAM,GACNc,SAAS,IAHiC,mBACrCC,EADqC,KAC9BC,EAD8B,KAY5C,OANAC,qBAAU,WACRzB,EAAQC,GAAUyB,MAAK,SAACX,GAAD,OACrBS,EAAS,CAAEhB,KAAMO,EAAQO,SAAS,SAEnC,CAACrB,IAEGsB,EDV2BI,CAAa,CAAE1B,aAAnCc,EADkB,EACxBP,KAAcc,EADU,EACVA,QAEtB,OACE,6BACE,4BAAKrB,GAEJqB,GAAW,yCAEXP,EAAOH,KAAI,SAACgB,GAAD,OACV,kBAAC,EAAD,eAAaC,IAAKD,EAAK7B,IAAQ6B,SEVjCE,EAAe,CAAC,kBAmBPC,EAjBM,WAAO,IAAD,EACW5C,mBAAS2C,GADpB,mBAClBpC,EADkB,KACNR,EADM,KAGzB,OACE,oCACE,8CACA,kBAAC,EAAD,CAAaA,cAAeA,IAE5B,4BACGQ,EAAWkB,KAAI,SAACX,GAAD,OACd,kBAAC,EAAD,CAAS4B,IAAK5B,EAAUA,SAAUA,UCX5C+B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.4601a6bc.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n  const [value, setValue] = useState('');\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        if (value.length > 0) {\n          setCategories((categories) => [value, ...categories]);\n        }\n        setValue('');\n      }}\n    >\n      <input\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n        type=\"text\"\n        name=\"value\"\n        id=\"value\"\n      />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","const API_KEY = 'prSUIN2A5rKqnYkLjWQpOFZufhM0DF7w';\n\nexport const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${encodeURI(\n    category\n  )}&limit=10`;\n\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  console.log(data);\n\n  const gifs = data.map((img) => ({\n    id: img.id,\n    title: img.title,\n    url: img.images?.downsized_medium.url,\n  }));\n\n  return gifs;\n};\n","import React from 'react';\n\nconst GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"grid-item\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n\nexport default GifGridItem;\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs({ category });\n\n  return (\n    <div>\n      <h3>{category}</h3>\n\n      {loading && <p>loading...</p>}\n\n      {images.map((item) => (\n        <GifGridItem key={item.id} {...item} />\n      ))}\n    </div>\n  );\n};\n\nexport default GifGrid;\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ({ category }) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((images) =>\n      setState({ data: images, loading: false })\n    );\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst initialState = ['Rick and morty'];\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState(initialState);\n\n  return (\n    <>\n      <h2>Gif expert app</h2>\n      <AddCategory setCategories={setCategories} />\n\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}